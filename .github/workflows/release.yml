# .github/workflows/release.yml
# Need to write to repo contents to upload the app to GitHub Release
# See: https://www.electronforge.io/config/publishers/github#authentication
permissions:
  contents: write

name: Release app

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    environment: release
    # Grant write access to repository contents for this specific job's GITHUB_TOKEN
    permissions:
      contents: write
    strategy:
      # Uncomment max-parallel to prevent race condition (where multiple releases are
      # created concurrently). Typically though, we'll create a release manually ahead of time
      # which prevents the race.
      # max-parallel: 1
      matrix:
        os:
          - { name: "windows", image: "windows-latest" }
          - { name: "linux", image: "ubuntu-22.04" }
    runs-on: ${{ matrix.os.image }}
    steps:
      - name: Github checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Use Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: 20
      - run: npm ci
      - name: Publish app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token will now have 'contents: write' scope
          # Keep Apple secrets if 'npm run publish' uses them for non-signing/notarization purposes
          # If they are solely for Apple notarization/signing, they can be removed.
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: npm run publish
        # This step will produce your built artifacts in a specific location.
      # =====================================================================
      # DYNAMIC ARTIFACT PATH DETECTION
      # =====================================================================
      - name: Find Build Output Path (Windows)
        id: find_windows_output
        if: contains(matrix.os.name, 'windows')
        run: |
          # Updated: Based on your build output, the Windows build output is in 'out/trio-win32-x64'
          $outputDir = "out/trio-win32-x64"
          if (-Not (Test-Path $outputDir)) {
              Write-Error "Expected Windows build output directory '$outputDir' not found."
              # For debugging, list 'out' directory if 'out/trio-win32-x64' isn't exact
              if (Test-Path "out") {
                  Write-Host "Contents of 'out' directory:"
                  Get-ChildItem -Path "out" -Recurse | Select-Object FullName, Length, LastWriteTime | Format-Table -AutoSize
              }
              exit 1
          }
          Write-Host "Detected Windows output directory: $outputDir"
          # List contents of the detected output directory to confirm what will be uploaded
          Get-ChildItem -Path $outputDir -Recurse | Select-Object FullName, Length, LastWriteTime | Format-Table -AutoSize
          echo "artifact_path=$outputDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        shell: powershell
      - name: Find Build Output Path (Linux)
        id: find_linux_output
        if: contains(matrix.os.name, 'linux')
        run: |
          # Updated: Based on your build output, the Linux build output is in 'out/trio-linux-x64'
          output_dir="out/trio-linux-x64"
          if [ ! -d "$output_dir" ]; then
              echo "Expected Linux build output directory '$output_dir' not found."
              # For debugging, list 'out' directory if '$output_dir' isn't exact
              if [ -d "out" ]; then
                  echo "Contents of 'out' directory:"
                  ls -R "out"
              fi
              exit 1
          fi
          echo "Detected Linux output directory: $output_dir"
          ls -R "$output_dir"
          echo "artifact_path=$output_dir" >> "$GITHUB_OUTPUT"
        shell: bash
      # =====================================================================
      # UPLOAD BUILT APPLICATIONS AS JOB ARTIFACTS
      # Now using the dynamically detected path
      # =====================================================================
      - name: Upload Windows App Artifact
        if: contains(matrix.os.name, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          # Uploads all contents of the detected directory
          path: ${{ steps.find_windows_output.outputs.artifact_path }}/*
          retention-days: 7
      - name: Upload Linux App Artifact
        if: contains(matrix.os.name, 'linux')
        uses: actions/upload-artifact@v4
        with:
          name: linux-app
          # Uploads all contents of the detected directory
          path: ${{ steps.find_linux_output.outputs.artifact_path }}/*
          retention-days: 7
      - name: Upload Windows Installer Artifact
        if: contains(matrix.os.name, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: out/make/squirrel.windows/x64/*.exe
          retention-days: 7

  # =====================================================================
  # CREATE GITHUB RELEASE
  # This job depends on the 'build' job and runs only once after all builds.
  # =====================================================================
  release:
    name: Create GitHub Release
    needs: build # This job will run only after all 'build' matrix jobs are successful
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating a release and uploading assets
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into this directory
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub Actions
        with:
          tag_name: ${{ github.event.inputs.version }} # Uses the version input from workflow_dispatch
          name: Release ${{ github.event.inputs.version }}
          body: |
            ## üöÄ Trio v1.0.0 ‚Äì The Next Generation AI App Builder
            
            **Author:** Hans Ade
            
            ---
            
            ### üåü Introducing Trio
            
            Trio is a revolutionary AI-powered app builder that puts you in full control. Unlike cloud-based competitors, Trio runs **locally on your machine**‚Äîdelivering unmatched speed, privacy, and flexibility. Whether you‚Äôre a developer, designer, or entrepreneur, Trio empowers you to create, iterate, and launch apps and websites by simply chatting with AI.
            
            ---
            
            ### ‚ú® Why Choose Trio Over Lovable.dev, Bolt.new, and v0.dev?
            
            - **Truly Local & Private:**  
              Your ideas, code, and data never leave your device. No vendor lock-in, no cloud dependency, and no privacy trade-offs. Trio is built for creators who value control and confidentiality.
            
            - **Bring Your Own AI Keys:**  
              Use your own API keys for OpenAI, Anthropic, Google Gemini, Mistral, Groq, and more. You‚Äôre never locked into a single provider or forced to pay platform markups.
            
            - **Cross-Platform Freedom:**  
              Trio runs natively on Windows and Mac (Linux support coming soon). No sign-up, no friction‚Äîjust download and start building.
            
            - **Open Source & Extensible:**  
              Trio is Apache 2.0-licensed and welcomes community contributions. You can inspect, extend, and trust every line of code.
            
            - **No Gimmicks, No Waiting:**  
              Unlike cloud tools that throttle, queue, or restrict your builds, Trio gives you instant, unlimited access to all features‚Äîforever.
            
            ---
            
            ### üèÜ Feature Highlights
            
            #### 1. **Conversational App Building**
            - Build full-stack apps, landing pages, dashboards, and more by chatting with AI.
            - Real-time code generation, editing, and live preview‚Äîsee changes as you chat.
            - Supports web, mobile, backend, and desktop app creation.
            
            #### 2. **Modern Tech Stack, Zero Lock-In**
            - Out-of-the-box support for React, Next.js, TypeScript, Tailwind CSS, shadcn/ui, and more.
            - Easily add, remove, or swap frameworks and libraries.
            - All code is yours‚Äîexport, modify, and deploy anywhere.
            
            #### 3. **AI Model Agnostic**
            - Connect to OpenAI, Anthropic, Google Gemini, Mistral, Groq, and local models (Ollama, LM Studio).
            - Switch providers on the fly for cost, speed, or privacy.
            
            #### 4. **Instant App Import & Export**
            - Import existing projects and instantly add AI-powered editing.
            - Export your codebase at any time‚Äîno proprietary formats.
            
            #### 5. **Powerful Version Control**
            - Built-in Git integration: initialize, commit, branch, and revert‚Äîall from the UI.
            - Visualize changes and roll back with confidence.
            
            #### 6. **Secure by Design**
            - All operations are sandboxed and run locally.
            - No telemetry or analytics unless you opt in.
            
            #### 7. **Developer Experience First**
            - Lightning-fast startup and build times.
            - Beautiful, modern UI with dark/light themes.
            - Toast notifications, keyboard shortcuts, and productivity boosters everywhere.
            
            #### 8. **Community & Support**
            - Open roadmap, active GitHub, and a welcoming community.
            - Direct support from the author, Hans Ade, and contributors.
            
            ---
            
            ### üí° What Can You Build with Trio?
            
            - SaaS dashboards
            - Landing pages
            - AI chatbots
            - Mobile apps
            - Internal tools
            - Data visualizations
            - API backends
            - ...and anything you can imagine!
            
            ---
            
            ### üî• The Trio Advantage
            
            - **Speed:** No cloud round-trips. Edits and previews are instant.
            - **Privacy:** Your intellectual property stays on your device.
            - **Ownership:** 100% open source. No hidden fees, no lock-in.
            - **Flexibility:** Use any AI, any stack, any workflow.
            - **Community:** Built by makers, for makers‚Äîwith you in mind.
            
            ---
            
            ### üì¶ Download & Get Started
            
            - **No sign-up required.**  
            - **Just download, run, and create.**
            
            üëâ [Download Trio for your platform](https://www.trio.sh/#download)
            
            ---
            
            ### üë®‚Äçüíª About the Author
            
            Trio is crafted by **Hans Ade**‚Äîa passionate developer and builder who believes in empowering creators with tools that are fast, private, and truly yours.
            
            ---
            
            ### üìù License
            
            Trio is open source under the Apache 2.0 License.
            
            ---
            
            ### üôå Join the Movement
            
            - [GitHub](https://github.com/Hansade2005/trio-sh)
            - [Community & Support](https://www.trio.sh/community)
            - [Contribute](./CONTRIBUTING.md)
            
            ---
            
            **Build something everyone will ‚ù§Ô∏è. Build it with Trio.**
            
            ---
            
            ## Downloads
            See attached artifacts.
          draft: false # Set to true to create a draft release
          prerelease: false # Set to true for pre-releases
          files: |
            artifacts/windows-app/**/* # Adjust to include all contents, including subdirectories
            artifacts/windows-installer/*.exe # Include the Windows installer
            artifacts/linux-app/**/* # Adjust to include all contents, including subdirectories
